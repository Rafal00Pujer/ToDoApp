@using ToDoApp.Data.Models
@using ToDoApp.Services

@rendermode InteractiveServer

@inject ToDoTaskService ToDoTaskService

<div class="col-12">
    <div class="row">

        <div class="col-12">
            <h4 class="text-center">@List.Name</h4>
        </div>

        @foreach (var task in List.Tasks)
        {
            <div class="col-12">
                <div class="row">

                    <div class="col-12">
                        <div class="form-floating">
                            <input type="text"
                                   value="@task.Name"
                                   @onchange="@((ChangeEventArgs __e) => UpdateTaskName(task, __e?.Value))"
                                   class="form-control" id="nameInput" />
                            <label for="nameInput">Task name</label>
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="form-floating">
                            <input type="datetime-local"
                                   value="@task.DueDate?.ToString("yyyy-MM-ddThh:mm:ss")"
                                   @onchange="@((ChangeEventArgs __e) => UpdateTaskDueDate(task, __e?.Value))"
                                   class="form-control" id="dueDateInput" />
                            <label for="dueDateInput">Due date</label>
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="input-group">
                            <span class="input-group-text">Completed</span>

                            <div class="input-group-text">
                                <input type="checkbox"
                                       checked="@task.IsCompleted"
                                       @onchange="@((ChangeEventArgs __e) => UpdateTaskIsCompleted(task, __e?.Value))" />
                            </div>

                            @if (task.IsCompleted)
                            {
                                <span class="input-group-text">on</span>
                                <span class="input-group-text">@task.CompletionDate.Value.ToString("yyyy-MM-ddThh:mm:ss")</span>
                            }
                        </div>
                    </div>

                </div>
            </div>
        }

        <div class="col-12 d-flex">
            <button class="btn btn-primary flex-fill" type="button" @onclick="AddTask">Add task</button>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public ToDoListModel List { get; set; } = default!;

    private async void AddTask()
    {
        var dto = new AddToDoTaskModel
            {
                Name = "New task",
                ToDoListId = List.Id
            };

        var result = await ToDoTaskService.AddTaskToList(dto);

        List.Tasks.Add(result);

        StateHasChanged();
    }

    private async void UpdateTaskName(ToDoTaskModel task, object? newName)
    {
        var value = (string)newName!;

        await ToDoTaskService.UpdateName(task.Id, value);

        task.Name = value;
    }

    private async void UpdateTaskDueDate(ToDoTaskModel task, object? newDueDate)
    {
        DateTime? value = null;

        if (DateTime.TryParse((string)newDueDate!, out DateTime newValue))
        {
            value = newValue;
        }

        await ToDoTaskService.UpdateDueDate(task.Id, value);

        task.DueDate = value;
    }

    private async void UpdateTaskIsCompleted(ToDoTaskModel task, object? newIsCompleted)
    {
        var value = (bool)newIsCompleted!;

        var result = await ToDoTaskService.UpdateIsCompleted(task.Id, value);

        task.IsCompleted = value;
        task.CompletionDate = result;

        StateHasChanged();
    }
}
