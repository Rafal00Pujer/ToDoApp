@page "/"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using ToDoApp.Components.Account
@using ToDoApp.Data.Models
@using ToDoApp.Services
@using ToDoApp.Data.Validation

@attribute [Authorize]
@rendermode InteractiveServer

@inject ToDoListService ToDoListService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>
    @Title
</PageTitle>

<div class="container">
    <div class="row row-cols-1 justify-content-center">
        <div class="col">
            <h1 class="text-center">@Title</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h3 class="text-center">Your lists</h3>
        </div>

        @if (_toDoLists is null)
        {
            <div class="col-12">
                <h4 class="text-center">Loading your list...</h4>
            </div>
        }
        else
        {
            foreach (var list in _toDoLists)
            {
                <ToDoList List="@list" DeleteListCallback="() => DeleteToDoList(list)" />
            }

            <div class="col-12 col-lg-6 col-xxl-4 py-2 my-1 border border-2 border-primary rounded-3">
                <div class="row">

                    <div class="col-12 my-2">
                        <h4 class="text-center">Add new list</h4>
                    </div>

                    <EditForm EditContext="@_editContext" OnValidSubmit="AddToDoList" FormName="AddToDoList">
                        <DataAnnotationsValidator />

                        <div class="col-12">
                            <div class="form-floating @GetFieldCssClass(() => _newToDoList!.Name)">
                                <InputText @bind-Value="_newToDoList!.Name" class="form-control" id="nameInput"
                                           placeholder="name" aria-describedby="validationNameInput" />
                                <label for="nameInput">To do list name</label>
                            </div>
                            <ValidationMessage For="@(() => _newToDoList.Name)" id="validationNameInput" class="invalid-feedback" />
                        </div>

                        <div class="col-12 d-flex py-2 my-1">
                            <button class="btn btn-primary flex-fill" type="submit">Add to do list</button>
                        </div>

                    </EditForm>

                </div>
            </div>
        }

    </div>
</div>

@code {
    private const string Title = "To Do App";

    private List<ToDoListModel>? _toDoLists;

    [CascadingParameter]
    private HttpContext _httpContext { get; set; } = default!;

    private EditContext? _editContext;
    private AddToDoListModel? _newToDoList;

    protected override async Task OnInitializedAsync()
    {
        SetupFormModel();

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var userId = state.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)!.Value;

        _toDoLists = await ToDoListService.GetToDoListsForUserAsync(userId);
    }

    private string GetFieldCssClass<TField>(System.Linq.Expressions.Expression<Func<TField>> field) => _editContext!.FieldCssClass(field);

    private async void AddToDoList()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var userId = state.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)!.Value;

        var result = await ToDoListService.AddToDoListToUserAsync(_newToDoList!, userId);

        if (_toDoLists is null)
        {
            _toDoLists = new();
        }

        _toDoLists.Add(result);

        SetupFormModel();

        StateHasChanged();
    }

    private async void DeleteToDoList(ToDoListModel list)
    {
        await ToDoListService.DeleteToDoListAsync(list.Id);

        _toDoLists!.Remove(list);

        StateHasChanged();
    }

    private void SetupFormModel()
    {
        _newToDoList = new();
        _editContext = new(_newToDoList);
        _editContext.SetFieldCssClassProvider(new BootstrapFieldClassProvider());
    }
}